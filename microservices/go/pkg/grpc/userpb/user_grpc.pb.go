// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: userpb/user.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserReaderClient is the client API for UserReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserReaderClient interface {
	GetUserByAuthId(ctx context.Context, in *AuthIdRequest, opts ...grpc.CallOption) (*UserReply, error)
}

type userReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewUserReaderClient(cc grpc.ClientConnInterface) UserReaderClient {
	return &userReaderClient{cc}
}

func (c *userReaderClient) GetUserByAuthId(ctx context.Context, in *AuthIdRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/UserReader/GetUserByAuthId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserReaderServer is the server API for UserReader service.
// All implementations must embed UnimplementedUserReaderServer
// for forward compatibility
type UserReaderServer interface {
	GetUserByAuthId(context.Context, *AuthIdRequest) (*UserReply, error)
	mustEmbedUnimplementedUserReaderServer()
}

// UnimplementedUserReaderServer must be embedded to have forward compatible implementations.
type UnimplementedUserReaderServer struct {
}

func (UnimplementedUserReaderServer) GetUserByAuthId(context.Context, *AuthIdRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByAuthId not implemented")
}
func (UnimplementedUserReaderServer) mustEmbedUnimplementedUserReaderServer() {}

// UnsafeUserReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserReaderServer will
// result in compilation errors.
type UnsafeUserReaderServer interface {
	mustEmbedUnimplementedUserReaderServer()
}

func RegisterUserReaderServer(s grpc.ServiceRegistrar, srv UserReaderServer) {
	s.RegisterService(&UserReader_ServiceDesc, srv)
}

func _UserReader_GetUserByAuthId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServer).GetUserByAuthId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserReader/GetUserByAuthId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServer).GetUserByAuthId(ctx, req.(*AuthIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserReader_ServiceDesc is the grpc.ServiceDesc for UserReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserReader",
	HandlerType: (*UserReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByAuthId",
			Handler:    _UserReader_GetUserByAuthId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userpb/user.proto",
}
